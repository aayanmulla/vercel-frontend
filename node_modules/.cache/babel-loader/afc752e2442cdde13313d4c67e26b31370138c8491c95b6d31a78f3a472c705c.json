{"ast":null,"code":"var _jsxFileName = \"/Users/karanpaigude/Desktop/Projects/Aayan Project/NewProject/ParkEz_Frontend/src/screens/Bookings/Bookings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Bookings.css\";\nimport Navbar from \"../NavBar/NavBar\";\nimport Reservation from \"../Reservations/Reservation\";\nimport Footer from \"../Footer/Footer\";\nimport { FaCalendarAlt } from \"react-icons/fa\"; // Import calendar icon\nimport { renderTicketToHTML } from \"../Ticket/helper.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Bookings = () => {\n  _s();\n  const [parkingSlots, setParkingSlots] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [bookedSlotId] = useState(null);\n  const [selectedSlotId, setSelectedSlotId] = useState(null);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Custom input component that shows calendar icon and selected date\n  const CustomDateInput = /*#__PURE__*/React.forwardRef(({\n    value,\n    onClick\n  }, ref) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-date-input\",\n    onClick: onClick,\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(FaCalendarAlt, {\n      className: \"calendar-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), value && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"selected-date\",\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this));\n  const fetchAllData = async () => {\n    setLoading(true);\n    try {\n      const [parkingRes, latestRes, reservedRes] = await Promise.all([fetch(\"http://localhost:5001/api/parking/slots\"), fetch(\"http://localhost:5001/api/slots/latest-booked-slot\"), fetch(\"http://localhost:5001/api/reserved/slots\")]);\n      if (!parkingRes.ok || !latestRes.ok || !reservedRes.ok) {\n        throw new Error(\"Failed to fetch one or more data sources\");\n      }\n      const parkingData = await parkingRes.json();\n      const latestData = await latestRes.json();\n      const reservedData = await reservedRes.json();\n      const parkingSlots = parkingData.parkingSlots || [];\n      const reservedSlots = reservedData.parkingSlots || [];\n      const latestBookedSlotId = latestData.latestBookedSlotId;\n      const reservedMap = new Map(reservedSlots.map(slot => [slot.id, slot]));\n      const updatedSlots = parkingSlots.map(slot => {\n        if (reservedMap.has(slot.id)) {\n          return reservedMap.get(slot.id); // Use reserved slot data (includes timeSlot)\n        }\n        return slot;\n      });\n      if (latestBookedSlotId) {\n        const slotIndex = updatedSlots.findIndex(slot => slot.id === latestBookedSlotId);\n        if (slotIndex !== -1) {\n          updatedSlots[slotIndex] = {\n            ...updatedSlots[slotIndex],\n            isOccupied: true,\n            status: \"occupied\"\n          };\n        } else {\n          updatedSlots.push({\n            id: latestBookedSlotId,\n            isOccupied: true,\n            status: \"occupied\"\n          });\n        }\n      }\n      setParkingSlots(updatedSlots);\n      return updatedSlots;\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setError(error.message);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAllData();\n    const interval = setInterval(fetchAllData, 180000);\n    return () => clearInterval(interval);\n  }, []);\n  const handlePayment = async slotId => {\n    const bookingDate = selectedDate || new Date();\n    if (!selectedTimeSlot) {\n      alert(\"Please select a time slot before proceeding with payment.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_8aHz8s9WnoELui\",\n      amount: 50 * 100,\n      currency: \"INR\",\n      name: \"ParkEz\",\n      description: `Parking Slot Payment: ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`,\n      handler: async function (response) {\n        try {\n          console.log(\"Fetching slot details for slotId:\", slotId);\n          const slotRes = await fetch(`http://localhost:5001/api/reserved/slotNumber/${slotId}`, {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n            }\n          });\n          if (!slotRes.ok) {\n            console.log(\"succeeded\");\n          }\n          if (!slotRes.ok) {\n            const errorText = await slotRes.text();\n            console.error(\"Error fetching slot:\", slotRes.status, errorText);\n            throw new Error(\"Slot not found\");\n          }\n\n          // if (!slotRes.ok) {\n          //   console.log(\"succeeded\");\n          // }\n          //\n          const slotData = await slotRes.json();\n          if (!slotData._id) {\n            alert(\"Slot not found. Please try again.\");\n            return;\n          }\n          const objectId = slotData._id;\n          console.log(\"Fetched objectId:\", objectId);\n          const updateRes = await fetch(`http://localhost:5001/api/reserved/${objectId}`, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify({\n              isOccupied: true,\n              paymentId: response.razorpay_payment_id,\n              timeSlot: selectedTimeSlot,\n              bookedAt: bookingDate.toISOString(),\n              status: \"occupied\"\n            })\n          });\n          if (!updateRes.ok) {\n            const errorText = await updateRes.text();\n            console.error(\"Error updating slot:\", updateRes.status, errorText);\n            throw new Error(\"Failed to update slot status\");\n          }\n          console.log(\"Slot successfully updated!\");\n          await fetchAllData();\n          const user = JSON.parse(localStorage.getItem(\"user\"));\n          const userEmail = user === null || user === void 0 ? void 0 : user.email;\n          if (userEmail) {\n            const bookingData = {\n              slotId: slotId,\n              date: bookingDate.toLocaleDateString(),\n              timeSlot: selectedTimeSlot,\n              paymentId: response.razorpay_payment_id\n            };\n            const ticketHTML = renderTicketToHTML(bookingData);\n            console.log(\"Generated ticket HTML:\", ticketHTML);\n            await fetch(\"http://localhost:5001/api/send-email\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                to: userEmail,\n                subject: \"Booking Confirmation\",\n                html: ticketHTML\n              })\n            });\n          } else {\n            console.error(\"Email not found in localStorage.\");\n          }\n          alert(`Payment successful! Your slot has been reserved for ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`);\n        } catch (error) {\n          console.error(\"Payment processing error:\", error);\n          alert(\"Payment succeeded but error updating reservation. Contact support.\");\n        }\n      },\n      prefill: {\n        name: \"Aayan Mulla\",\n        email: \"aayanmulla10@gmail.com\",\n        contact: \"7083076077\"\n      },\n      theme: {\n        color: \"#3399cc\"\n      }\n    };\n    try {\n      const rzp1 = new window.Razorpay(options);\n      rzp1.open();\n    } catch (error) {\n      console.error(\"Error opening payment dialog:\", error);\n      alert(\"Failed to initialize payment. Please try again.\");\n    }\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    setSelectedSlotId(null);\n    setSelectedTimeSlot(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bookings-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"bookings-heading\",\n        children: \"Ajeenkya DY Patil Parking Zone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading parking slots...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-picker-container\",\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: selectedDate,\n            onChange: handleDateChange,\n            minDate: new Date(),\n            customInput: /*#__PURE__*/_jsxDEV(CustomDateInput, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 30\n            }, this),\n            dateFormat: \"MMMM d, yyyy\",\n            placeholderText: \"\",\n            withPortal: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookings-grid\",\n          children: parkingSlots.map(slot => {\n            const isOccupied = slot.isOccupied || bookedSlotId === slot.id;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `parking-slot ${slot.isOccupied === null ? \"under-construction\" : isOccupied ? \"occupied\" : \"available\"}`,\n              onClick: () => {\n                if (!slot.isOccupied && slot.isOccupied !== null) {\n                  setSelectedSlotId(slot.id);\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Slot \", slot.id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: slot.isOccupied === null ? \"Under Construction\" : isOccupied ? slot.timeSlot ? `Booked for ${slot.timeSlot}` : \"Occupied\" : \"Available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 21\n              }, this), selectedSlotId === slot.id && !isOccupied && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"time-slot-selection\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Select Time Slot:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: selectedTimeSlot,\n                  onChange: e => setSelectedTimeSlot(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"-- Select --\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"9 AM - 12 PM\",\n                    children: \"9 AM - 12 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"12 PM - 3 PM\",\n                    children: \"12 PM - 3 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"3 PM - 6 PM\",\n                    children: \"3 PM - 6 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"6 PM - 9 PM\",\n                    children: \"6 PM - 9 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handlePayment(slot.id),\n                  children: \"Book Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 23\n              }, this)]\n            }, slot.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Reservation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(Bookings, \"IQFSBtCB8IE7ngEcugCj0x0lfQc=\");\n_c = Bookings;\nexport default Bookings;\nvar _c;\n$RefreshReg$(_c, \"Bookings\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Navbar","Reservation","Footer","FaCalendarAlt","renderTicketToHTML","jsxDEV","_jsxDEV","Bookings","_s","parkingSlots","setParkingSlots","loading","setLoading","error","setError","bookedSlotId","selectedSlotId","setSelectedSlotId","selectedTimeSlot","setSelectedTimeSlot","selectedDate","setSelectedDate","CustomDateInput","forwardRef","value","onClick","ref","className","children","fileName","_jsxFileName","lineNumber","columnNumber","fetchAllData","parkingRes","latestRes","reservedRes","Promise","all","fetch","ok","Error","parkingData","json","latestData","reservedData","reservedSlots","latestBookedSlotId","reservedMap","Map","map","slot","id","updatedSlots","has","get","slotIndex","findIndex","isOccupied","status","push","console","message","interval","setInterval","clearInterval","handlePayment","slotId","bookingDate","Date","alert","options","key","amount","currency","name","description","toLocaleDateString","handler","response","log","slotRes","method","headers","Authorization","localStorage","getItem","errorText","text","slotData","_id","objectId","updateRes","body","JSON","stringify","paymentId","razorpay_payment_id","timeSlot","bookedAt","toISOString","user","parse","userEmail","email","bookingData","date","ticketHTML","to","subject","html","prefill","contact","theme","color","rzp1","window","Razorpay","open","handleDateChange","selected","onChange","minDate","customInput","dateFormat","placeholderText","withPortal","e","target","_c","$RefreshReg$"],"sources":["/Users/karanpaigude/Desktop/Projects/Aayan Project/NewProject/ParkEz_Frontend/src/screens/Bookings/Bookings.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Bookings.css\";\nimport Navbar from \"../NavBar/NavBar\";\nimport Reservation from \"../Reservations/Reservation\";\nimport Footer from \"../Footer/Footer\";\nimport { FaCalendarAlt } from \"react-icons/fa\"; // Import calendar icon\nimport { renderTicketToHTML } from \"../Ticket/helper.tsx\";\n\nconst Bookings = () => {\n  const [parkingSlots, setParkingSlots] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [bookedSlotId] = useState(null);\n  const [selectedSlotId, setSelectedSlotId] = useState(null);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Custom input component that shows calendar icon and selected date\n  const CustomDateInput = React.forwardRef(({ value, onClick }, ref) => (\n    <div className=\"custom-date-input\" onClick={onClick} ref={ref}>\n      <FaCalendarAlt className=\"calendar-icon\" />\n      {value && <span className=\"selected-date\">{value}</span>}\n    </div>\n  ));\n\n  const fetchAllData = async () => {\n    setLoading(true);\n    try {\n      const [parkingRes, latestRes, reservedRes] = await Promise.all([\n        fetch(\"http://localhost:5001/api/parking/slots\"),\n        fetch(\"http://localhost:5001/api/slots/latest-booked-slot\"),\n        fetch(\"http://localhost:5001/api/reserved/slots\"),\n      ]);\n\n      if (!parkingRes.ok || !latestRes.ok || !reservedRes.ok) {\n        throw new Error(\"Failed to fetch one or more data sources\");\n      }\n\n      const parkingData = await parkingRes.json();\n      const latestData = await latestRes.json();\n      const reservedData = await reservedRes.json();\n\n      const parkingSlots = parkingData.parkingSlots || [];\n      const reservedSlots = reservedData.parkingSlots || [];\n      const latestBookedSlotId = latestData.latestBookedSlotId;\n\n      const reservedMap = new Map(reservedSlots.map((slot) => [slot.id, slot]));\n\n      const updatedSlots = parkingSlots.map((slot) => {\n        if (reservedMap.has(slot.id)) {\n          return reservedMap.get(slot.id); // Use reserved slot data (includes timeSlot)\n        }\n        return slot;\n      });\n\n      if (latestBookedSlotId) {\n        const slotIndex = updatedSlots.findIndex(\n          (slot) => slot.id === latestBookedSlotId,\n        );\n        if (slotIndex !== -1) {\n          updatedSlots[slotIndex] = {\n            ...updatedSlots[slotIndex],\n            isOccupied: true,\n            status: \"occupied\",\n          };\n        } else {\n          updatedSlots.push({\n            id: latestBookedSlotId,\n            isOccupied: true,\n            status: \"occupied\",\n          });\n        }\n      }\n\n      setParkingSlots(updatedSlots);\n      return updatedSlots;\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setError(error.message);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAllData();\n    const interval = setInterval(fetchAllData, 180000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handlePayment = async (slotId) => {\n    const bookingDate = selectedDate || new Date();\n\n    if (!selectedTimeSlot) {\n      alert(\"Please select a time slot before proceeding with payment.\");\n      return;\n    }\n\n    const options = {\n      key: \"rzp_test_8aHz8s9WnoELui\",\n      amount: 50 * 100,\n      currency: \"INR\",\n      name: \"ParkEz\",\n      description: `Parking Slot Payment: ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`,\n      handler: async function (response) {\n        try {\n          console.log(\"Fetching slot details for slotId:\", slotId);\n\n          const slotRes = await fetch(\n            `http://localhost:5001/api/reserved/slotNumber/${slotId}`,\n            {\n              method: \"GET\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n              },\n            },\n          );\n          if (!slotRes.ok) {\n            console.log(\"succeeded\");\n          }\n\n          if (!slotRes.ok) {\n            const errorText = await slotRes.text();\n            console.error(\"Error fetching slot:\", slotRes.status, errorText);\n            throw new Error(\"Slot not found\");\n          }\n\n          // if (!slotRes.ok) {\n          //   console.log(\"succeeded\");\n          // }\n          //\n          const slotData = await slotRes.json();\n          if (!slotData._id) {\n            alert(\"Slot not found. Please try again.\");\n            return;\n          }\n\n          const objectId = slotData._id;\n          console.log(\"Fetched objectId:\", objectId);\n\n          const updateRes = await fetch(\n            `http://localhost:5001/api/reserved/${objectId}`,\n            {\n              method: \"PATCH\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n              },\n              body: JSON.stringify({\n                isOccupied: true,\n                paymentId: response.razorpay_payment_id,\n                timeSlot: selectedTimeSlot,\n                bookedAt: bookingDate.toISOString(),\n                status: \"occupied\",\n              }),\n            },\n          );\n\n          if (!updateRes.ok) {\n            const errorText = await updateRes.text();\n            console.error(\"Error updating slot:\", updateRes.status, errorText);\n            throw new Error(\"Failed to update slot status\");\n          }\n\n          console.log(\"Slot successfully updated!\");\n          await fetchAllData();\n\n          const user = JSON.parse(localStorage.getItem(\"user\"));\n          const userEmail = user?.email;\n\n          if (userEmail) {\n            const bookingData = {\n              slotId: slotId,\n              date: bookingDate.toLocaleDateString(),\n              timeSlot: selectedTimeSlot,\n              paymentId: response.razorpay_payment_id,\n            };\n            const ticketHTML = renderTicketToHTML(bookingData);\n            console.log(\"Generated ticket HTML:\", ticketHTML);\n\n            await fetch(\"http://localhost:5001/api/send-email\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                to: userEmail,\n                subject: \"Booking Confirmation\",\n                html: ticketHTML,\n              }),\n            });\n          } else {\n            console.error(\"Email not found in localStorage.\");\n          }\n          alert(\n            `Payment successful! Your slot has been reserved for ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`,\n          );\n        } catch (error) {\n          console.error(\"Payment processing error:\", error);\n          alert(\n            \"Payment succeeded but error updating reservation. Contact support.\",\n          );\n        }\n      },\n      prefill: {\n        name: \"Aayan Mulla\",\n        email: \"aayanmulla10@gmail.com\",\n        contact: \"7083076077\",\n      },\n      theme: {\n        color: \"#3399cc\",\n      },\n    };\n\n    try {\n      const rzp1 = new window.Razorpay(options);\n      rzp1.open();\n    } catch (error) {\n      console.error(\"Error opening payment dialog:\", error);\n      alert(\"Failed to initialize payment. Please try again.\");\n    }\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    setSelectedSlotId(null);\n    setSelectedTimeSlot(\"\");\n  };\n\n  return (\n    <div className=\"bookings-container\">\n      <Navbar />\n      <div className=\"bookings-content\">\n        <h1 className=\"bookings-heading\">Ajeenkya DY Patil Parking Zone</h1>\n\n        {loading ? (\n          <p>Loading parking slots...</p>\n        ) : error ? (\n          <p className=\"error-message\">{error}</p>\n        ) : (\n          <div>\n            <div className=\"date-picker-container\">\n              <DatePicker\n                selected={selectedDate}\n                onChange={handleDateChange}\n                minDate={new Date()}\n                customInput={<CustomDateInput />}\n                dateFormat=\"MMMM d, yyyy\"\n                placeholderText=\"\"\n                withPortal\n              />\n            </div>\n\n            <div className=\"bookings-grid\">\n              {parkingSlots.map((slot) => {\n                const isOccupied = slot.isOccupied || bookedSlotId === slot.id;\n\n                return (\n                  <div\n                    key={slot.id}\n                    className={`parking-slot ${\n                      slot.isOccupied === null\n                        ? \"under-construction\"\n                        : isOccupied\n                          ? \"occupied\"\n                          : \"available\"\n                    }`}\n                    onClick={() => {\n                      if (!slot.isOccupied && slot.isOccupied !== null) {\n                        setSelectedSlotId(slot.id);\n                      }\n                    }}\n                  >\n                    <span>Slot {slot.id}</span>\n                    <span>\n                      {slot.isOccupied === null\n                        ? \"Under Construction\"\n                        : isOccupied\n                          ? slot.timeSlot\n                            ? `Booked for ${slot.timeSlot}`\n                            : \"Occupied\"\n                          : \"Available\"}\n                    </span>\n\n                    {selectedSlotId === slot.id && !isOccupied && (\n                      <div className=\"time-slot-selection\">\n                        <label>Select Time Slot:</label>\n                        <select\n                          value={selectedTimeSlot}\n                          onChange={(e) => setSelectedTimeSlot(e.target.value)}\n                        >\n                          <option value=\"\">-- Select --</option>\n                          <option value=\"9 AM - 12 PM\">9 AM - 12 PM</option>\n                          <option value=\"12 PM - 3 PM\">12 PM - 3 PM</option>\n                          <option value=\"3 PM - 6 PM\">3 PM - 6 PM</option>\n                          <option value=\"6 PM - 9 PM\">6 PM - 9 PM</option>\n                        </select>\n                        <button onClick={() => handlePayment(slot.id)}>\n                          Book Now\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n      <Reservation />\n      <Footer />\n    </div>\n  );\n};\n\nexport default Bookings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}